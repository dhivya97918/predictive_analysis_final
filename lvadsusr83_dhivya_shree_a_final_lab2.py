# -*- coding: utf-8 -*-
"""LVADSUSR83_Dhivya_Shree_a_Final_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qgcngtOuZE-8hnFAAJ9cSvXsUNGe49Fx
"""

#Regression
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error,r2_score
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix,classification_report
#dataset
data=pd.read_csv("/content/sample_data/auto-mpg.csv")
data= data.drop(columns=['car name'])

#Handling missing values (forward fill) and removing duplicates
data = data.fillna(data.mean())
data = data.drop_duplicates()
print(data)

#Outlier detection using IQR method
Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR = Q3 - Q1
outliers = ((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)
data = data[~outliers]
# Replace '?' with NaN
data.replace('?', pd.NA, inplace=True)


data[data1] = data[data1].apply(pd.to_numeric, errors='coerce')

# Fill missing values with the mean
data.fillna(data.mean(), inplace=True)
#EDA
a=data.describe()
b=data.shape
c=data.info()

# Split the dataset into features (X) and target variable (y)
X = data.drop(columns=['mpg'])
y = data['mpg']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
clf = LinearRegression()
clf.fit(X_train, y_train)  # Train the model

predictions = clf.predict(X_test)# Test the model
print(predictions)

#model evalution
#mean squared
mse = mean_squared_error(y_test, predictions)
print("Mean Squared Error using Linear Regression:", mse)
#r squared
r_squared = r2_score(y_test, predictions)
print("R-squared:", r_squared)
# RMSE
rmse = np.sqrt(mse)
print("Root Mean Squared Error:", rmse)

plt.scatter(y_test, predictions)
plt.xlabel("Actual values")
plt.ylabel("Predicted values")
plt.title("Actual vs. Predicted values")
plt.show()